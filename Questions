Q0 : Quels sont les deux écrans disponibles dans l’application ?

Login : Écran de connexion où l'utilisateur entre son identifiant et son mot de passe.
Todo : Écran de la liste des tâches, accessible après une connexion réussie.

Q1 : Quels packages contiennent respectivement les View, ViewModel et Model ?

View : Généralement dans un package comme com.example.exercice.view (contient les fichiers .fxml et les contrôleurs de vue comme LoginView.java et TodoView.java).
ViewModel : Généralement dans un package comme com.example.exercice.viewmodel (contient les classes comme LoginViewModel.java et TodoViewModel.java).
Model : Généralement dans un package comme com.example.exercice.model (contient les classes métiers comme Todo.java et les services comme AuthService.java).

Q2 : À quoi sert la propriété canLoginProperty() dans le ViewModel ?

La propriété canLoginProperty() est généralement une propriété booléenne qui indique si le bouton de connexion doit être activé ou non. 
Elle est liée aux champs username et password : elle retourne true uniquement si les deux champs sont remplis (ou respectent certains critères de validation), permettant ainsi d'activer ou de désactiver le bouton de connexion dans la vue.

Q3 : Où est-elle utilisée dans la LoginView.fxml ou LoginView.java ?

La propriété canLoginProperty() est utilisée dans la class LoginView.java pour lier l'état du bouton de connexion (btnLogin).
Dans LoginView.fxml n'est pas directement utilisée dans le fichier FXML.

Q4 : Quel est le rôle de FilteredList<Todo> dans le ViewModel ?

Dans le TodoViewModel, la classe FilteredList<Todo> est utilisée pour filtrer dynamiquement la liste des tâches (source).
Elle permet d'afficher uniquement les tâches qui correspondent à un certain critère, défini par la méthode match(Todo t). 
Par exemple, elle peut filtrer les tâches pour n'afficher que celles qui ne sont pas terminées (!t.isDone()), sauf si la propriété showDone est activée. 
Cela permet de mettre à jour automatiquement l'affichage en fonction des préférences de l'utilisateur.

Q5 : Que fait la propriété showDone et à quel élément de la Vue est-elle reliée ?

La propriété showDone est un BooleanProperty qui détermine si les tâches marquées comme terminées doivent être affichées ou non. 
Lorsqu'elle est modifiée, elle déclenche une réévaluation du prédicat de filtrage via la méthode recomputePredicate(). 
Dans la Vue, elle est généralement reliée à une case à cocher (checkbox) ou un bouton qui permet à l'utilisateur de choisir s'il veut voir ou non les tâches terminées.

Q6 : Quelle est la différence entre bind(...) et bindBidirectional(...) ?

bind(...) :
La méthode bind crée une liaison unidirectionnelle. Cela signifie que la propriété cible est mise à jour automatiquement lorsque la propriété source change, mais pas l'inverse.
bindBidirectional(...) : 
La méthode bindBidirectional crée une liaison bidirectionnelle. Cela signifie que les deux propriétés sont synchronisées : si l'une change, l'autre est automatiquement mise à jour, et vice versa.

Q7 : Pourquoi utilise-t-on bindBidirectional ici ?

On utilise bindBidirectional ici pour que le texte saisi dans txtNew mette à jour vm.newTitleProperty(). Si vm.newTitleProperty() change, txtNew soit aussi mis à jour.

Q8 : Dans la table des Todos, pourquoi utilise-t-on CheckBoxTableCell pour la colonne Fait ?

Cela permet d'afficher une case à cocher (checkbox) pour chaque tâche.
L'utilisateur peut cocher ou décocher directement la case pour indiquer si la tâche est terminée ou non.

Q9 : Comment est gérée la navigation entre l’écran Login et l’écran Todo (Navigator.java) ?

Navigator permet de basculer entre les scènes en remplaçant la scène actuelle par une nouvelle scène.
